$date
	Fri Jul 11 02:51:08 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 # pc_src $end
$var wire 1 " reset $end
$var wire 5 $ rs2 [4:0] $end
$var wire 5 % rs1 [4:0] $end
$var wire 1 & reg_write $end
$var wire 32 ' rd2 [31:0] $end
$var wire 32 ( rd1 [31:0] $end
$var wire 5 ) rd [4:0] $end
$var wire 7 * opcode [6:0] $end
$var wire 2 + mem_write_type [1:0] $end
$var wire 1 , mem_write $end
$var wire 1 - mem_to_reg $end
$var wire 1 . mem_read $end
$var wire 2 / mem_data_type [1:0] $end
$var wire 32 0 mem_data_out [31:0] $end
$var wire 32 1 instr [31:0] $end
$var wire 32 2 imm [31:0] $end
$var wire 7 3 funct7 [6:0] $end
$var wire 3 4 funct3 [2:0] $end
$var wire 32 5 branch_target [31:0] $end
$var wire 1 6 branch_taken $end
$var wire 1 7 branch $end
$var wire 1 8 alu_src $end
$var wire 32 9 alu_out_standard [31:0] $end
$var wire 32 : alu_out_mext [31:0] $end
$var wire 32 ; alu_out [31:0] $end
$var wire 2 < alu_op [1:0] $end
$var wire 32 = alu_input_b_pre_mux [31:0] $end
$var wire 32 > alu_input_b_forwarded [31:0] $end
$var wire 32 ? alu_input_b [31:0] $end
$var wire 32 @ alu_input_a_forwarded [31:0] $end
$var wire 5 A alu_control [4:0] $end
$var wire 32 B WB_result [31:0] $end
$var wire 1 C Stall_ID_EX $end
$var wire 32 D PC_next [31:0] $end
$var wire 1 E PCWrite $end
$var wire 32 F PC [31:0] $end
$var wire 1 G IF_ID_Write $end
$var wire 2 H ForwardB [1:0] $end
$var wire 2 I ForwardA [1:0] $end
$var reg 32 J EX_MEM_alu_out [31:0] $end
$var reg 3 K EX_MEM_funct3 [2:0] $end
$var reg 1 L EX_MEM_mem_read $end
$var reg 1 M EX_MEM_mem_to_reg $end
$var reg 1 N EX_MEM_mem_write $end
$var reg 5 O EX_MEM_rd [4:0] $end
$var reg 32 P EX_MEM_rd2 [31:0] $end
$var reg 1 Q EX_MEM_reg_write $end
$var reg 32 R ID_EX_PC [31:0] $end
$var reg 2 S ID_EX_alu_op [1:0] $end
$var reg 1 T ID_EX_alu_src $end
$var reg 1 U ID_EX_branch $end
$var reg 3 V ID_EX_funct3 [2:0] $end
$var reg 7 W ID_EX_funct7 [6:0] $end
$var reg 32 X ID_EX_imm [31:0] $end
$var reg 1 Y ID_EX_mem_read $end
$var reg 1 Z ID_EX_mem_to_reg $end
$var reg 1 [ ID_EX_mem_write $end
$var reg 5 \ ID_EX_rd [4:0] $end
$var reg 32 ] ID_EX_rd1 [31:0] $end
$var reg 32 ^ ID_EX_rd2 [31:0] $end
$var reg 1 _ ID_EX_reg_write $end
$var reg 32 ` IF_ID_PC [31:0] $end
$var reg 32 a IF_ID_instr [31:0] $end
$var reg 32 b MEM_WB_alu_out [31:0] $end
$var reg 32 c MEM_WB_mem_data [31:0] $end
$var reg 1 d MEM_WB_mem_to_reg $end
$var reg 5 e MEM_WB_rd [4:0] $end
$var reg 1 f MEM_WB_reg_write $end
$var reg 32 g alu_output [31:0] $end
$scope module alu_core $end
$var wire 32 h data1 [31:0] $end
$var wire 32 i data2 [31:0] $end
$var wire 5 j alu_control [4:0] $end
$var reg 32 k result [31:0] $end
$upscope $end
$scope module alu_cu $end
$var wire 2 l alu_op [1:0] $end
$var wire 3 m funct3 [2:0] $end
$var wire 7 n funct7 [6:0] $end
$var reg 5 o alu_control [4:0] $end
$upscope $end
$scope module alu_mext_core $end
$var wire 5 p alu_control [4:0] $end
$var wire 32 q data1 [31:0] $end
$var wire 32 r data2 [31:0] $end
$var wire 64 s mul_unsigned [63:0] $end
$var wire 64 t mul_signed_unsigned [63:0] $end
$var wire 64 u mul_signed [63:0] $end
$var reg 32 v result [31:0] $end
$upscope $end
$scope module branch_cmp $end
$var wire 3 w funct3 [2:0] $end
$var wire 32 x reg1 [31:0] $end
$var wire 32 y reg2 [31:0] $end
$var reg 1 6 branch_taken $end
$upscope $end
$scope module cu $end
$var wire 7 z opcode [6:0] $end
$var reg 2 { alu_op [1:0] $end
$var reg 1 8 alu_src $end
$var reg 1 7 branch $end
$var reg 1 . mem_read $end
$var reg 1 - mem_to_reg $end
$var reg 1 , mem_write $end
$var reg 1 & reg_write $end
$upscope $end
$scope module dmem $end
$var wire 32 | addr [31:0] $end
$var wire 32 } address [31:0] $end
$var wire 1 ! clk $end
$var wire 2 ~ data [1:0] $end
$var wire 32 !" data_in [31:0] $end
$var wire 2 "" write [1:0] $end
$var reg 32 #" data_out [31:0] $end
$upscope $end
$scope module fwd_unit $end
$var wire 5 $" EX_RS1 [4:0] $end
$var wire 5 %" EX_RS2 [4:0] $end
$var wire 5 &" MEMite $end
$var wire 5 &" WB_RD [4:0] $end
$var wire 1 f WB_RegWrite $end
$var reg 2 '" ForwardA [1:0] $end
$var reg 2 (" ForwardB [1:0] $end
$upscope $end
$scope module hazard_unit $end
$var wire 1 Y EX_MemRead $end
$var wire 5 )" EX_RD [4:0] $end
$var wire 5 *" ID_RS1 [4:0] $end
$var wire 5 +" ID_RS2 [4:0] $end
$var reg 1 G IF_ID_Write $end
$var reg 1 E PCWrite $end
$var reg 1 C Stall_ID_EX $end
$upscope $end
$scope module imem $end
$var wire 32 ," instr [31:0] $end
$var wire 32 -" addr [31:0] $end
$upscope $end
$scope module imm_gen $end
$var wire 32 ." instr [31:0] $end
$var wire 7 /" opcode [6:0] $end
$var reg 32 0" imm_out [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ! clk $end
$var wire 32 1" next_pc [31:0] $end
$var wire 1 E pc_write $end
$var wire 1 " reset $end
$var reg 32 2" pc_out [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 3" rd_addr [4:0] $end
$var wire 32 4" rd_data [31:0] $end
$var wire 5 5" rs1_addr [4:0] $end
$var wire 5 6" rs2_addr [4:0] $end
$var wire 1 f we $end
$var wire 32 7" rs2_data [31:0] $end
$var wire 32 8" rs1_data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
b0 2"
bx 1"
bx 0"
bx /"
bx ."
b0 -"
b100000000001010010011 ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
b0xxxxxxxxxx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
xf
bx e
xd
bx c
bx b
bx a
bx `
x_
bx ^
bx ]
bx \
x[
xZ
xY
bx X
bx W
bx V
xU
xT
bx S
bx R
xQ
bx P
bx O
xN
xM
xL
bx K
bx J
bx I
bx H
xG
b0 F
xE
bx D
xC
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
x8
x7
x6
bx 5
bx 4
bx 3
bx 2
b100000000001010010011 1
bx 0
bx /
x.
x-
x,
bx +
bx *
bx )
bx (
bx '
x&
bx %
bx $
x#
1"
0!
$end
#5000
b0 (
b0 8"
b0 H
b0 ("
b0 I
b0 '"
0C
1G
1E
07
b11 <
b11 z
18
0-
0,
0.
1&
b0 %
b0 #"
b0 *"
b0 5"
b1 $
b1 $"
b1 +"
b1 6"
b101 )
b10011 *
b10011 y
b0 4
b0 3
b1 2
b1 0"
b10011 /"
b100000000001010010011 a
b100000000001010010011 ."
b0 `
1!
#10000
0!
#15000
b1 {
b0 +
b0 !"
b0 /
b0 }
b1 J
b1 |
0M
0N
0L
1Q
b0 K
b101 O
b101 %"
b1 ;
b1 9
b1 j
b0 :
b0 u
b0 t
b0 s
b0 r
b1 >
b1 h
b1 q
0#
b0 A
b0 i
b0 n
b0 o
b1 ?
b100 D
b100 1"
b1 =
b0 @
b0 g
b0 p
0U
b11 S
b11 k
1T
0Z
0[
0Y
1_
b0 W
b0 m
b0 V
b0 l
b0 v
b101 \
b101 )"
b1 5
b1 X
b0 ]
b0 w
b0 R
1!
#20000
0!
0"
#25000
b1 B
b1 4"
b10100000000000010010011 1
b10100000000000010010011 ,"
b1000 D
b1000 1"
0d
1f
b101 e
b101 &"
b101 3"
b1 b
b100 F
b100 -"
b100 2"
1!
#30000
0!
#35000
b10 H
b10 ("
b1 '
b1 7"
b101 $
b101 $"
b101 +"
b101 6"
b1 )
b101 2
b101 0"
b101000000000000100010011 1
b101000000000000100010011 ,"
b1100 D
b1100 1"
b10100000000000010010011 a
b10100000000000010010011 ."
b100 `
b1000 F
b1000 -"
b1000 2"
1!
#40000
0!
#45000
b101 {
b101 J
b101 |
b1 O
b1 %"
b1 P
b1 ~
b101 ;
b101 9
b101 j
b101 >
b101 h
b101 q
b0 H
b0 ("
bx '
bx 7"
b1010 $
b1010 $"
b1010 +"
b1010 6"
b10 )
b1010 2
b1010 0"
b101 ?
b101 =
06
b1000001000000110110011 1
b1000001000000110110011 ,"
b10000 D
b10000 1"
b101000000000000100010011 a
b101000000000000100010011 ."
b1000 `
b1 \
b1 )"
b101 X
b1 ^
b1 x
b1001 5
b100 R
b1100 F
b1100 -"
b1100 2"
1!
#50000
0!
b100 R
b1100 F
b1100 ."
b1100 3"
1!
#50000
b101 g
0!
#55000
b1010 |
b10 H
b10 )"
b1010 J
b1010 }
b10 O
b10 &"
bx P
bx !"
b1010 ;
b11001 u
b11001 t
b11001 s
b101 @
b101 h
b101 q
b1010 9
b1010 k
b101 >
b101 i
b101 r
bx (
bx 9"
b10 <
b10 {
08
1&
b1 I
b1 ("
b101 B
b101 5"
b1010 ?
b1010 =
x6
b1 %
b1 $"
b1 +"
b1 6"
b10 $
b10 %"
b10 ,"
b10 7"
b11 )
b110011 *
b110011 z
b0 2
b0 1"
b110011 0"
b100011000001000110011 1
b100011000001000110011 -"
b10100 D
b10100 2"
b1 e
b1 '"
b1 4"
b101 b
b10 \
b10 *"
b1010 X
bx ^
bx y
b10010 5
b1000 R
b1000001000000110110011 a
b1000001000000110110011 /"
b1100 `
b10000 F
b10000 ."
b10000 3"
1!
#60000
b1111 |
b1111 J
b1111 }
b1111 ;
b1111 9
b1111 k
b110010 u
b110010 t
b110010 s
b1010 >
b1010 i
b1010 r
b1010 g
0!
#65000
b0xxxxxxxxxx |
bx J
bx }
b11 O
b11 &"
bx ;
bx >
bx i
bx r
bx 9
bx k
b101 '
b101 8"
bx u
bx t
bx s
b1010 @
b1010 h
b1010 q
b11 %
b11 $"
b11 +"
b11 6"
b1 $
b1 %"
b1 ,"
b1 7"
b100 )
bx ?
bx =
b0 H
b0 )"
b10 I
b10 ("
b1111 B
b1111 5"
b11010001010000011 1
b11010001010000011 -"
b11000 D
b11000 2"
b100011000001000110011 a
b100011000001000110011 /"
b10000 `
b10 S
b10 l
0T
b11 \
b11 *"
b0 X
bx ]
bx x
b1100 5
b1100 R
b10 e
b10 '"
b10 4"
b1111 b
b10100 F
b10100 ."
b10100 3"
1!
#70000
bx @
bx h
bx q
bx g
0!
#75000
b100 O
b100 &"
b101 P
b101 !"
b101 >
b101 i
b101 r
b0 '
b0 8"
18
1-
1.
b0 <
b0 {
1&
b1 I
b1 ("
bx B
bx 5"
b101 ?
b101 =
b0 $
b0 %"
b0 ,"
b0 7"
b101 )
b11 *
b11 z
b10 4
b11 0"
b100101000001110110011 1
b100101000001110110011 -"
b11100 D
b11100 2"
b11 e
b11 '"
b11 4"
bx b
b100 \
b100 *"
b101 ^
b101 y
b10000 5
b10000 R
b11010001010000011 a
b11010001010000011 /"
b10100 `
b11000 F
b11000 ."
b11000 3"
1!
#80000
0!
#85000
b10 /
b10 ~
1M
1L
b10 K
b101 O
b101 &"
b0 P
b0 !"
b1 (
b1 9"
1C
0G
0E
b101 '
b101 8"
b10 <
b10 {
08
0-
0.
1&
b0 >
b0 i
b0 r
b101 %
b101 $"
b101 +"
b101 6"
b1 $
b1 %"
b1 ,"
b1 7"
b111 )
b110011 *
b110011 z
b0 4
b110011 0"
b0 ?
b0 =
06
b10 I
b10 ("
bx 1
bx -"
b100000 D
b100000 2"
b100101000001110110011 a
b100101000001110110011 /"
b11000 `
b0 S
b0 l
1T
1Z
1Y
b10 V
b10 m
b10 w
b101 \
b101 *"
b0 ^
b0 y
b10100 5
b10100 R
b100 e
b100 '"
b100 4"
b11100 F
b11100 ."
b11100 3"
1!
#90000
0!
#95000
b110 |
b0 /
b0 ~
b110 J
b110 }
0M
0L
0Q
b0 K
b111 O
b111 &"
b101 P
b101 !"
b110 ;
b110 9
b110 k
b101 u
b101 t
b101 s
b1 @
b1 h
b1 q
b101 >
b101 i
b101 r
bx (
bx 9"
bx '
bx 8"
b0 <
b0 {
0&
b0 I
b0 ("
b101 ?
b101 =
0C
1G
1E
bx %
bx $"
bx +"
bx 6"
bx $
bx %"
bx ,"
bx 7"
bx )
bx *
bx z
bx 4
bx 3
bx 0"
1d
b101 e
b101 '"
b101 4"
0_
b0 S
b0 l
0T
0Z
0Y
b0 V
b0 m
b0 w
b111 \
b111 *"
b101 ^
b101 y
b1 ]
b1 x
b11000 5
b11000 R
bx a
bx /"
b11100 `
1!
#100000
b110 g
0!
#105000
b0xxxxxxxxxx |
bx /
bx ~
bx J
bx }
bx K
bx O
bx &"
bx P
bx !"
bx ;
bx >
bx i
bx r
bx 9
bx k
bx ?
bx =
bx u
bx t
bx s
bx @
bx h
bx q
b110 B
b110 5"
b100100 D
b100100 2"
bx W
bx n
bx V
bx m
bx w
bx \
bx *"
bx ^
bx y
bx ]
bx x
b11100 5
b11100 R
0d
0f
b111 e
b111 '"
b111 4"
b110 b
b100000 F
b100000 ."
b100000 3"
1!
#110000
bx g
0!
#115000
bx B
bx 5"
b101000 D
b101000 2"
bx e
bx '"
bx 4"
bx b
b100000 `
b100100 F
b100100 ."
b100100 3"
1!
#120000
0!
#125000
b101100 D
b101100 2"
b100100 `
b100000 5
b100000 R
b101000 F
b101000 ."
b101000 3"
1!
#130000
0!
#135000
b110000 D
b110000 2"
b100100 5
b100100 R
b101000 `
b101100 F
b101100 ."
b101100 3"
1!
#140000
0!
#145000
b110100 D
b110100 2"
b101100 `
b101000 5
b101000 R
b110000 F
b110000 ."
b110000 3"
1!
#150000
0!
#155000
b111000 D
b111000 2"
b101100 5
b101100 R
b110000 `
b110100 F
b110100 ."
b110100 3"
1!
#160000
0!
#165000
b111100 D
b111100 2"
b110100 `
b110000 5
b110000 R
b111000 F
b111000 ."
b111000 3"
1!
#170000
0!
#175000
b1000000 D
b1000000 2"
b110100 5
b110100 R
b111000 `
b111100 F
b111100 ."
b111100 3"
1!
#180000
0!
#185000
b1000100 D
b1000100 2"
b111100 `
b111000 5
b111000 R
b1000000 F
b1000000 ."
b1000000 3"
1!
#190000
0!
#195000
b1001000 D
b1001000 2"
b111100 5
b111100 R
b1000000 `
b1000100 F
b1000100 ."
b1000100 3"
1!
#200000
0!
#205000
b1001100 D
b1001100 2"
b1000100 `
b1000000 5
b1000000 R
b1001000 F
b1001000 ."
b1001000 3"
1!
#210000
0!
#215000
b1010000 D
b1010000 2"
b1000100 5
b1000100 R
b1001000 `
b1001100 F
b1001100 ."
b1001100 3"
1!
#220000
0!
